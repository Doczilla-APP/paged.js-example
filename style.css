@media screen {

	 .pagedjs_pages {
        display: flex;
        width: calc(var(--pagedjs-width));
        flex: 0;
        flex-wrap: wrap;
        margin: 0 auto;
        justify-content: center;

    }

    .pagedjs_page {
        margin: 10mm;
        margin: 10mm;
        border: solid 1px gray;
    }


}

/* 1. Some Font Definitons (just for my own personal
preference, below is not required for producing pdfs) */
@font-face {
	font-family: 'Roboto';
	src: url('fonts/Roboto-Light.ttf') format('truetype');
	font-weight: normal;
}

@font-face {
	font-family: 'Roboto';
	src: url('fonts/Roboto-LightItalic.ttf') format('truetype');
	font-weight: normal;
	font-style: italic;
}

@font-face {
	font-family: 'Roboto';
	src: url('fonts/Roboto-Bold.ttf') format('truetype');
	font-weight: bold;
}

@font-face {
	font-family: 'Roboto';
	src: url('fonts/Roboto-BoldItalic.ttf') format('truetype');
	font-weight: bold;
	font-style: italic;
}

@font-face {
	font-family: 'Roboto Thin';
	src: url('fonts/Roboto-Thin.ttf') format('truetype');
	font-weight: normal;
}


@font-face {
	font-family: 'Custom Mono';
	src: url('fonts/RobotoMono-Medium.ttf') format('truetype');
	font-weight: bold;
}


@font-face {
	font-family: 'Custom Mono';
	src: url('fonts/RobotoMono-Light.ttf') format('truetype');
	font-weight: normal;
}

@font-face {
	font-family: 'Roboto Medium';
	src: url('fonts/Roboto-Medium.ttf') format('truetype');
	font-weight: bold;
}


/* 2. Some generic styling (again for my own personal
preference, below is not required for producing pdfs) */
html { font-family: 'Roboto', sans-serif; font-size: 100%; color: #211A1D;}
h1 { border-bottom: 1px solid black; margin-bottom: 2rem; padding-bottom: 1rem; }
h2 { border-bottom: 0.125rem solid black; margin-bottom: 1rem; padding-bottom: 0.5rem; }
p {	text-align: justify; line-height: 1.4rem;}
a { color: #347dbd; text-decoration: none; font-family: 'Roboto Medium', sans-serif;}
a:hover { color: #FC814A; font-family: 'Roboto Medium', sans-serif;}

body {
	counter-reset: sectionaNumber;
	counter-reset: subsectionNumber;
	counter-reset: figureNumber;
}

h2:not(.no-counter) {
	counter-increment: sectionaNumber;
	counter-reset: subsectionNumber;
	counter-reset: figureNumber; 
}

h3:not(.no-counter) {
	counter-increment: subsectionNumber;
}

figure:not(.no-counter) {
	counter-increment: figureNumber;
}

h2:not(.no-counter)::before {
	content: counter(sectionaNumber) ". ";
}

h3:not(.no-counter)::before {
	content: counter(sectionaNumber) "." counter(subsectionNumber) " ";
}

figcaption:not(.no-counter)::before {
	content: "Figure " counter(sectionaNumber) "." counter(figureNumber) " ";
}

pre {
	background-color: #f0f0f0;
	font-family: 'Custom Mono', monospace;
	padding: 1rem;
	font-size: smaller;
	white-space: pre-wrap;
}

figure {
	margin-block-start: 2rem; margin-block-end: 2rem;
	margin-inline-start: 3rem; margin-inline-end: 3rem;
}
figcaption { caption-side: top; font-size: smaller;
	font-family: 'Custom Mono', monospace; font-weight: bold; } 

/* Personal note: #347dbd & #445a75 for blue and dark blue colors */

/* 3. Setting our page size to A4 */
@page { size: A4; }


/* 4. Define page break class to allow us to manually page
break whenever we want by inserting a div of this class */
.page-break { break-after: page; }


/* 5. Defining our styled footer element */
.footer {
	position: running(footerRunning);
	font-family: 'Roboto Thin';	color: gray;
}

/* 6. Adding our footer to the page rules */
@page {
	@bottom-left {
    	content: element(footerRunning);
    	width: 80mm;
    }
}

/* 7. Adding string-set to our <h2> and <h3> tags. We
also force a page break before every <h2> tag.
Not how we added the class "no-break" to allow us to
prevent the automatic page break on every h2 tag. For 
example, we do not want the first h2 tag after the TOC 
to cause a page break */
h2 { string-set: section content(text);	}
h2:not(.no-break) { break-before: page; }
h3 { string-set: subsection content(text); }

/* 8. Adding our dynamic header to the page rules */
@page {
	@top-right {
    	content: string(section) " - " string(subsection);
  	}
}

/* 9. Add page numbers to the page rules */
@page {
  	@bottom-right { content: counter(page); }
}

/* 10. Define a counter rest class to reset page numbers
when we want to (e.g. after cover page) */
.counter-reset { counter-reset: page 1; }

/* 11. Define a cover page class for custom page rules,
e.g. adding background color, hiding headers/footers */
.cover-page { page: cover-page; }

.cover-page h1 {
	border-bottom: 1px solid white; 
}

@page cover-page {
    background-color: #347DBD; color: white;
    @top-right { content: none; }
    @bottom-left { content: none; }
    @bottom-right { content: none; }
}


/* 12. Define a table of content class for custom page
rules, again removing headers/footers but not page numbers */
.table-of-contents { page: table-of-contents; }

.toc-header { margin-bottom: 1rem; border-bottom: 0.5rem solid black; }

@page table-of-contents {
	@top-right { content: none; }
	@bottom-left { content: none; }
}


/* Additional CSS: Advanced Styling for TOC */

ol, ul {
	padding-inline-start: 0px;
}

ol, ul a {
	text-decoration: none;
}

.toc-element-level-1 a, .toc-element-level-2 a {
	color: black;
}

/* set the style for the list numbering to none */
#list-toc-generated{ list-style: none; }

#list-toc-generated .toc-element a::after{
    content: target-counter(attr(href), page);
    float: right;
}

#list-toc-generated .toc-element-level-1 {
    border-bottom: 0.5px solid black;
    margin-top: 2rem; margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    font-weight: bold;
}

/* counters */

#list-toc-generated {  
    counter-reset: counterTocLevel1; 
}

#list-toc-generated .toc-element-level-1{ 
    counter-increment: counterTocLevel1; 
    counter-reset: counterTocLevel2; 
}

#list-toc-generated .toc-element-level-1::before{ 
    content: counter(counterTocLevel1) ". ";
    padding-right: 5px;
}

#list-toc-generated .toc-element-level-2 { 
    counter-increment: counterTocLevel2;
    margin-bottom: 0.5rem;
}

#list-toc-generated .toc-element-level-2::before{ 
    content: counter(counterTocLevel1) "." counter(counterTocLevel2) " ";
    padding-right: 5px;
}



/* hack for leaders */

#list-toc-generated{
    overflow-x: hidden;
}

/* fake leading */
#list-toc-generated .toc-element-level-2::after{
    content: 
        ".............................................."
        ".............................................."
        ".............................................."  
        "........";
    float: left;
    width: 0;
    padding-left: 5px;
    letter-spacing: 2px;
}

#list-toc-generated .toc-element{
    display: flex; 
}

#list-toc-generated .toc-element a::after{
    position: absolute;
    right: 0;
    background-color: white;
    padding-left: 6px;
}

#list-toc-generated .toc-element a{
    right: 0;
}